#!/usr/bin/env ruby

require 'i3ipc'

class I3Helper
  def initialize
    @i3 = I3Ipc::Connection.new
  end

  def tree
    @tree ||= @i3.tree
  end

  def recurse(nodes = nil, focused: false, floating: false, depth: 0, &blk)
    nodes ||= tree.nodes
    nodes.each do |n|
      blk.call n, focused: n.focused || focused, depth: depth, floating: floating
      depth += 1
      recurse(n.nodes, depth: depth, floating: floating, &blk)
      recurse(n.floating_nodes, depth: depth, floating: true, &blk)
    end
  end

  def is_floating?
    recurse(tree.nodes) do |n, focused:, depth:, floating:|
      return true if floating && focused
    end
    false
  end

  def layout_exec(command, cols: 2, rows: 3, balance: :auto)
    windows = []

    focused_window = nil
    focused_workspace = nil

    workspace = nil

    recurse do |n, depth: , focused: , floating:|
      # dim = n.type == "con" ? " #{n.rect.width}x#{n.rect.height}" : ""
      # puts "#{"  " * depth} #{n.name} #{n.type}#{dim} #{n.layout}  #{focused ? "*" : ""} #{floating ? "f" : ""}"
      workspace = n.name if n.type == "workspace"

      if n.respond_to?(:window_properties) && !floating
        windows << {window: n, workspace: workspace}
        if focused
          focused_window = n if focused
          focused_workspace = workspace
        end
      end
    end

    if !focused_window
      @i3.command("exec #{command}")
      return
    end

    windows = windows.select do |window:, workspace:|
      workspace == focused_workspace && window.output == focused_window.output && window.window_properties.instance != "i3bar"
    end.map do |window:, workspace:|
      window
    end

    if balance == :auto && windows.length > 0
      outputs = @i3.outputs.sort{|a,b| a.rect.x <=> b.rect.x}

      left_aligns = []
      take = false
      outputs.each do |output|
        left_aligns << output.name if take
        take = true if output.primary
      end

      if left_aligns.include?(windows[0].output)
        balance = :left
      end
    end

    dir = nil
    pid = `xprop -id $(xdotool getactivewindow) _NET_WM_PID`
    if pid && pid = pid.split(' ').last.to_i
      if pid > 0
        lpid = `pstree -aApT #{pid}`
        lpid = lpid.split("\n").select{|r| r =~ /zsh,|bash,/}.first
        if lpid && lpid = lpid.split(",").last
          dir = `readlink /proc/#{lpid}/cwd`.strip
          if dir && !dir.empty? && !dir.include?("'")
            command = "cd #{dir} && #{command}"
          end
        end
      end
    end

    if windows.length < cols
      @i3.command("split h; exec #{command}")
    else
      full_cols = (windows.length - cols) / (rows - 1)
      full_rows = (windows.length - cols) % (rows - 1)
      index = cols - full_cols - 1

      if balance == :left
        index = full_cols * rows
      end

      window = windows[index]

      split = full_rows == 0 ?  " split v;" : ""
      @i3.command("[con_id=\"#{window.id}\"] focus; #{split} exec #{command}")
    end

    #p @i3.outputs
  end

  def focus(dir)
    floating_windows = []
    focused_window = nil
    focused_workspace = nil

    recurse do |n, depth: , focused: , floating:|

      workspace = n.name if n.type == "workspace"

      if n.respond_to?(:window_properties) && floating
        floating_windows << {node: n, workspace: workspace}
        if focused
          focused_window = n
          focused_workspace = workspace
        end
      end
    end

    # we are on a floating window
    if focused_window

      floating_windows = floating_windows.filter do |node:, workspace:|
        workspace == focused_workspace && node.output != '__i3'
      end.map do |node:, workspace:|

        pos = begin
          case dir
          when "right", "left" then
            node.rect.x + node.rect.width / 2
          when "up", "down" then
            node.rect.y + node.rect.width / 2
          end
        end


        { node: node, pos: pos }
      end.sort_by {|hash| hash[:pos]}
        .map {|node:, pos:| node}


      pos = floating_windows.index(focused_window)

      new_pos = pos + (dir == "right" || dir == "down" ? 1 : -1)


      if new_pos >= floating_windows.length || new_pos < 0
        @i3.command("focus parent; focus #{dir}")
      else
        @i3.command("[con_id=\"#{floating_windows[new_pos].id}\"] focus")
      end

      return
    end

    @i3.command("focus #{dir}")
  end

  def move(dir)
    if is_floating?
      @i3.command("mark _last")
      @i3.command("move to output #{dir}")
      @i3.command('[con_mark="_last"] focus')
    else
      @i3.command("move #{dir}")
    end
  end

  def smart_center(arg)

    focused_window = nil
    is_floating = false

    recurse do |n, depth: , focused: , floating:|
      if n.respond_to?(:window_properties)
        if focused
          focused_window = n
          is_floating = floating
        end
      end
    end

    sizes = arg.split(',').map do |x|
      x.split("x").map(&:to_i)
    end

    if focused_window

      index = sizes.map(&:first).index do |width|
        (focused_window.rect.width.to_i - width).abs < 15
      end

      index = -1 if !is_floating

      width, height = sizes[((index || -1) + 1) % sizes.length]

      if is_floating
        @i3.command("resize set width #{width} px; resize set height #{height} px; move position center; move up 5 px")
      else
        @i3.command("floating enable; resize set width #{width} px; resize set height #{height} px; move position center; move up 5 px;")
      end
    end


  end

  def screenshot(args)
    focused_output = nil

    recurse do |n, depth: , focused: , floating:|
      if n.type == "output"
        focused_output = n
      end

      if focused
        break
      end
    end

    `mkdir -p ~/screenshots`

    rect = focused_output.rect

    filename = "~/screenshots/desktop-#{Time.now.strftime('%Y%m%d-%H%M%S')}.png"
    cmd = "import -silent -window root -crop #{rect.width}x#{rect.height}+#{rect.x}+#{rect.y} #{filename}"
    `#{cmd}`
    cmd = "pngquant -f --output #{filename} #{filename}"
    `#{cmd}`
    cmd = "bash -c 'copyq write image/png - < #{filename}' && copyq select 0"
    `#{cmd}`
    cmd = "notify-send '#{File.basename(filename)} #{File.size(File.expand_path(filename))/1024}k'"
    `#{cmd}`
  end

  def close
    @i3.close
    @i3 = nil
  end
end

helper = I3Helper.new

def usage
  puts "i3-plus [COMMAND] [PARAMS]"
  puts ""
  puts "Commands:"
  puts " move [DIR]: will move the current window left, if it is floating it will move the window to next monitor "
  puts " focus [DIR]: slightly amended focus that breaks out of floated windows"
  puts " layout_exec: similar to exec except that it tries to maintain a certain layout"
  puts " screenshot: at the moment this takes a screenshot of current desktop and compresses"
end


case ARGV[0]
when "layout_exec" then
  helper.layout_exec "i3-sensible-terminal"
when "move" then
  helper.move(ARGV[1])
when "focus" then
  helper.focus(ARGV[1])
when "smart_center" then
  helper.smart_center(ARGV[1])
when "screenshot"
  helper.screenshot(ARGV[2..-1])
else
  puts "unknown command"
  usage
  helper.close
  exit 1
end


helper.close
